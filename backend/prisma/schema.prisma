generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model Student_payment_pending {
  pending_payment_id Int                            @id @default(autoincrement())
  amount             Int
  student_id         Int
  school_id          Int
  category_id        Int
  payment_photo      String                         @db.Text
  status             Student_payment_pending_status
  created_at         DateTime                       @db.DateTime(0)
  updated_at         DateTime                       @db.DateTime(0)
  students           students                       @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "Student_payment_pending_ibfk_1")
  schools            schools                        @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "Student_payment_pending_ibfk_2")
  fee_categories     fee_categories                 @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "Student_payment_pending_ibfk_3")

  @@index([category_id], map: "category_id")
  @@index([school_id], map: "school_id")
  @@index([student_id], map: "student_id")
}

model academic_year {
  id                Int                 @id @default(autoincrement())
  year              String              @db.VarChar(255)
  school_id         Int
  is_current        Boolean             @default(false)
  schools           schools             @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "academic_year_ibfk_1")
  school_financials school_financials[]

  @@index([school_id], map: "school_id")
}

model admins {
  admin_id           Int                 @id @default(autoincrement())
  school_id          Int
  admin_name         String              @db.VarChar(100)
  admin_email        String              @db.VarChar(100)
  admin_phone_number String              @db.VarChar(15)
  admin_password     String              @db.VarChar(100)
  role_id            Int
  schools            schools             @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "admins_ibfk_1")
  roles              roles               @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "admins_ibfk_2")
  student_fees       student_fees[]
  students_payments  students_payments[]

  @@index([role_id], map: "role_id")
  @@index([school_id], map: "school_id")
}

model bannerImages {
  banner_id  Int      @id @default(autoincrement())
  filename   String   @db.VarChar(255)
  school_id  Int
  uploadedOn DateTime @db.DateTime(0)
  schools    schools  @relation(fields: [school_id], references: [school_id], onDelete: Cascade, map: "bannerImages_ibfk_1")

  @@index([school_id], map: "school_id")
}

model classrooms {
  classroom_id  Int             @id @default(autoincrement())
  standard      String          @db.VarChar(50)
  section       String          @db.VarChar(10)
  school_id     Int
  addedDate     DateTime        @db.Time(0)
  schools       schools         @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "classrooms_ibfk_1")
  exam_marks    exam_marks[]
  exams         exams[]
  homeworks     homeworks[]
  messageBoards messageBoards[]
  student_fees  student_fees[]
  students      students[]
  teachers      teachers?

  @@index([school_id], map: "school_id")
}

model exam_marks {
  id         Int        @id @default(autoincrement())
  school_id  Int
  subject_id Int
  class_id   Int
  student_id Int
  exam_id    Int
  marks      Int
  schools    schools    @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_marks_ibfk_1")
  subjects   subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_marks_ibfk_2")
  classrooms classrooms @relation(fields: [class_id], references: [classroom_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_marks_ibfk_3")
  students   students   @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_marks_ibfk_4")
  exams      exams      @relation(fields: [exam_id], references: [exam_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_marks_ibfk_5")

  @@index([class_id], map: "class_id")
  @@index([exam_id], map: "exam_id")
  @@index([school_id], map: "school_id")
  @@index([student_id], map: "student_id")
  @@index([subject_id], map: "subject_id")
}

model exams {
  exam_id         Int          @id @default(autoincrement())
  exam_name       String       @db.VarChar(225)
  class_id        Int
  school_id       Int
  addedOn         DateTime     @db.DateTime(0)
  start_date      DateTime     @db.DateTime(0)
  timetable_photo String       @db.VarChar(200)
  end_date        DateTime     @db.DateTime(0)
  status          exams_status
  exam_marks      exam_marks[]
  classrooms      classrooms   @relation(fields: [class_id], references: [classroom_id], onDelete: NoAction, onUpdate: NoAction, map: "exams_ibfk_1")
  schools         schools      @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "exams_ibfk_2")

  @@index([class_id], map: "class_id")
  @@index([school_id], map: "school_id")
}

model fee_categories {
  category_id             Int                       @id @default(autoincrement())
  school_id               Int
  category_name           String                    @db.VarChar(225)
  description             String?                   @db.Text
  created_at              DateTime?                 @db.DateTime(0)
  updated_at              DateTime?                 @db.DateTime(0)
  Student_payment_pending Student_payment_pending[]
  schools                 schools                   @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "fee_categories_ibfk_1")
  student_fees            student_fees[]
  students_payments       students_payments[]

  @@index([school_id], map: "school_id")
}

model gallery {
  gallery_id Int      @id @default(autoincrement())
  filename   String   @db.VarChar(255)
  event_name String   @db.VarChar(20)
  school_id  Int
  uploadedOn DateTime @db.DateTime(0)
  schools    schools  @relation(fields: [school_id], references: [school_id], onDelete: Cascade, map: "gallery_ibfk_1")

  @@index([school_id], map: "school_id")
}

model homeworks {
  homework_id  Int        @id @default(autoincrement())
  school_id    Int
  classroom_id Int
  subject_id   Int
  context      String     @db.Text
  addedDate    DateTime   @db.Date
  schools      schools    @relation(fields: [school_id], references: [school_id], onDelete: NoAction, map: "homeworks_ibfk_1")
  classrooms   classrooms @relation(fields: [classroom_id], references: [classroom_id], onDelete: NoAction, map: "homeworks_ibfk_2")
  subjects     subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "homeworks_ibfk_3")

  @@index([classroom_id], map: "classroom_id")
  @@index([school_id], map: "school_id")
  @@index([subject_id], map: "subject_id")
}

model interested_schools {
  school_id    Int                       @id @default(autoincrement())
  school_name  String                    @db.VarChar(225)
  location     String                    @db.VarChar(225)
  status       interested_schools_status
  admin_name   String                    @db.VarChar(225)
  phone_number String                    @db.VarChar(13)
  created_at   DateTime                  @db.DateTime(0)
  updated_at   DateTime                  @db.DateTime(0)
}

model messageBoards {
  message_id      Int                        @id @default(autoincrement())
  student_id      Int?
  classroom_id    Int?
  message_type    messageBoards_message_type
  text_message    String?                    @db.Text
  voice_location  String?                    @db.VarChar(225)
  school_id       Int
  added_by        messageBoards_added_by
  added_member_id Int?
  added_on        DateTime                   @db.DateTime(0)
  type            messageBoards_type
  students        students?                  @relation(fields: [student_id], references: [student_id], onDelete: Cascade, map: "messageBoards_ibfk_1")
  classrooms      classrooms?                @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, map: "messageBoards_ibfk_2")
  schools         schools                    @relation(fields: [school_id], references: [school_id], onDelete: Cascade, map: "messageBoards_ibfk_3")

  @@index([classroom_id], map: "classroom_id")
  @@index([school_id], map: "school_id")
  @@index([student_id], map: "student_id")
}

model modules {
  id          Int     @id @default(autoincrement())
  module_name String? @db.VarChar(225)
}

model roles {
  role_id     Int        @id @default(autoincrement())
  role_name   String     @db.VarChar(225)
  school_id   Int
  permissions Json?
  admins      admins[]
  schools     schools    @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "roles_ibfk_1")
  teachers    teachers[]

  @@index([school_id], map: "school_id")
}

model school_financials {
  school_financial_id Int           @id @default(autoincrement())
  year                String        @db.VarChar(255)
  year_id             Int
  school_id           Int
  current_balance     Int
  created_at          DateTime      @db.DateTime(0)
  updated_at          DateTime      @db.DateTime(0)
  academic_year       academic_year @relation(fields: [year_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "school_financials_ibfk_1")
  schools             schools       @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "school_financials_ibfk_2")

  @@index([school_id], map: "school_id")
  @@index([year_id], map: "year_id")
}

model schools {
  school_id               Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(100)
  address                 String                    @db.VarChar(255)
  phone_number            String?                   @db.VarChar(15)
  email                   String?                   @db.VarChar(100)
  school_code             String                    @db.VarChar(100)
  Student_payment_pending Student_payment_pending[]
  academic_year           academic_year[]
  admins                  admins[]
  bannerImages            bannerImages[]
  classrooms              classrooms[]
  exam_marks              exam_marks[]
  exams                   exams[]
  fee_categories          fee_categories[]
  gallery                 gallery[]
  homeworks               homeworks[]
  messageBoards           messageBoards[]
  roles                   roles[]
  school_financials       school_financials[]
  studentAttendance       studentAttendance[]
  student_fees            student_fees[]
  students                students[]
  students_payments       students_payments[]
  subjects                subjects[]
  teacherAttendance       teacherAttendance[]
  teachers                teachers[]
  youtudeVideo            youtudeVideo[]
}

model studentAttendance {
  attendance_id Int      @id @default(autoincrement())
  student_id    Int
  school_id     Int
  attendDate    DateTime @db.Date
  attendTime    DateTime @db.Time(0)
  students      students @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "studentAttendance_ibfk_1")
  schools       schools  @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "studentAttendance_ibfk_2")

  @@index([school_id], map: "school_id")
  @@index([student_id], map: "student_id")
}

model student_fees {
  fee_id         Int            @id @default(autoincrement())
  fee_amount     Int
  total_fee_paid Int
  fee_remaining  Int
  school_id      Int
  category_id    Int
  student_id     Int
  classroom_id   Int
  created_by     String         @db.VarChar(255)
  teacher_id     Int?
  admin_id       Int?
  created_at     DateTime?      @db.DateTime(0)
  updated_at     DateTime?      @db.DateTime(0)
  schools        schools        @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "student_fees_ibfk_1")
  fee_categories fee_categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "student_fees_ibfk_2")
  students       students       @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "student_fees_ibfk_3")
  classrooms     classrooms     @relation(fields: [classroom_id], references: [classroom_id], onDelete: NoAction, onUpdate: NoAction, map: "student_fees_ibfk_4")
  teachers       teachers?      @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction, map: "student_fees_ibfk_5")
  admins         admins?        @relation(fields: [admin_id], references: [admin_id], onDelete: NoAction, onUpdate: NoAction, map: "student_fees_ibfk_6")

  @@index([admin_id], map: "admin_id")
  @@index([category_id], map: "category_id")
  @@index([classroom_id], map: "classroom_id")
  @@index([school_id], map: "school_id")
  @@index([student_id], map: "student_id")
  @@index([teacher_id], map: "teacher_id")
}

model students {
  student_id              Int                       @id @default(autoincrement())
  admission_ID            String                    @unique(map: "admission_ID") @db.VarChar(50)
  first_name              String                    @db.VarChar(50)
  last_name               String                    @db.VarChar(50)
  date_of_birth           DateTime                  @db.Date
  gender                  students_gender
  email                   String                    @db.VarChar(100)
  student_photo           String?                   @db.VarChar(255)
  father_photo            String?                   @db.VarChar(255)
  phone_number            String                    @db.VarChar(15)
  address                 String?                   @db.VarChar(255)
  enrollment_date         DateTime                  @db.Date
  status                  students_status           @default(Active)
  mother_name             String                    @db.VarChar(225)
  father_name             String                    @db.VarChar(225)
  mother_phone_number     String                    @db.VarChar(20)
  caste                   students_caste
  sub_caste               String                    @db.VarChar(225)
  assignedClassroom       Int?
  school_code             String                    @db.VarChar(20)
  school_id               Int
  Student_payment_pending Student_payment_pending[]
  exam_marks              exam_marks[]
  messageBoards           messageBoards[]
  studentAttendance       studentAttendance[]
  student_fees            student_fees[]
  classrooms              classrooms?               @relation(fields: [assignedClassroom], references: [classroom_id], onDelete: NoAction, onUpdate: NoAction, map: "students_ibfk_1")
  schools                 schools                   @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "students_ibfk_2")
  students_payments       students_payments[]

  @@index([assignedClassroom], map: "assignedClassroom")
  @@index([school_id], map: "school_id")
}

model students_payments {
  payment_id     Int                            @id @default(autoincrement())
  amount         Int
  school_id      Int
  category_id    Int
  student_id     Int
  payment_mode   students_payments_payment_mode
  collected_by   Int?
  payment_date   DateTime?                      @db.DateTime(0)
  created_at     DateTime                       @db.DateTime(0)
  updated_at     DateTime                       @db.DateTime(0)
  schools        schools                        @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "students_payments_ibfk_1")
  fee_categories fee_categories                 @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "students_payments_ibfk_2")
  students       students                       @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "students_payments_ibfk_3")
  admins         admins?                        @relation(fields: [collected_by], references: [admin_id], onDelete: NoAction, onUpdate: NoAction, map: "students_payments_ibfk_4")

  @@index([category_id], map: "category_id")
  @@index([collected_by], map: "collected_by")
  @@index([school_id], map: "school_id")
  @@index([student_id], map: "student_id")
}

model subjects {
  subject_id   Int          @id @default(autoincrement())
  subject_name String       @db.VarChar(225)
  subject_code String       @db.VarChar(10)
  school_id    Int
  exam_marks   exam_marks[]
  homeworks    homeworks[]
  schools      schools      @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_ibfk_1")
  teachers     teachers[]

  @@index([school_id], map: "school_id")
}

model teacherAttendance {
  attendance_id Int                      @id @default(autoincrement())
  teacher_id    Int
  school_id     Int
  attendDate    DateTime                 @db.Date
  attendTime    DateTime                 @db.Time(0)
  status        teacherAttendance_status @default(pending)
  submitted_at  DateTime                 @db.DateTime(0)
  teachers      teachers                 @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction, map: "teacherAttendance_ibfk_1")
  schools       schools                  @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "teacherAttendance_ibfk_2")

  @@index([school_id], map: "school_id")
  @@index([teacher_id], map: "teacher_id")
}

model teachers {
  teacher_id                        Int                 @id @default(autoincrement())
  TeacherID                         String              @unique(map: "TeacherID") @db.VarChar(20)
  first_name                        String              @db.VarChar(50)
  last_name                         String              @db.VarChar(50)
  subject_id                        Int
  email                             String              @db.VarChar(100)
  phone_number                      String              @db.VarChar(15)
  hire_date                         DateTime            @db.Date
  status                            teachers_status
  adminAccess                       Boolean
  school_code                       String              @db.VarChar(10)
  salary                            Int
  assignedClass                     Int?                @unique(map: "assignedClass")
  school_id                         Int
  role_id                           Int
  teachers_qualification            String?             @db.VarChar(255)
  teacher_photo                     String?             @db.VarChar(255)
  teacher_qualification_certificate String?             @db.VarChar(255)
  student_fees                      student_fees[]
  teacherAttendance                 teacherAttendance[]
  subjects                          subjects            @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "teachers_ibfk_1")
  classrooms                        classrooms?         @relation(fields: [assignedClass], references: [classroom_id], onDelete: NoAction, onUpdate: NoAction, map: "teachers_ibfk_2")
  schools                           schools             @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "teachers_ibfk_3")
  roles                             roles               @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "teachers_ibfk_4")

  @@index([role_id], map: "role_id")
  @@index([school_id], map: "school_id")
  @@index([subject_id], map: "subject_id")
}

model users {
  id           Int        @id @default(autoincrement())
  phone_number String     @db.VarChar(15)
  role         users_role
  original_id  String     @db.VarChar(50)
  createdAt    DateTime?  @default(now()) @db.DateTime(0)
  updatedAt    DateTime?  @default(now()) @db.DateTime(0)
}

model youtudeVideo {
  youtude_id  Int     @id @default(autoincrement())
  event_name  String  @db.VarChar(20)
  youtudeLink String  @db.VarChar(225)
  school_id   Int
  schools     schools @relation(fields: [school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "youtudeVideo_ibfk_1")

  @@index([school_id], map: "school_id")
}

enum users_role {
  student
  teacher
  admin
  admin_teacher @map("admin-teacher")
}

enum interested_schools_status {
  fresh
  contacted_no_response       @map("contacted-no-response")
  contacted_awaiting_response @map("contacted-awaiting-response")
  closed
}

enum messageBoards_message_type {
  text
  voice
}

enum students_gender {
  Male
  Female
  Other
}

enum students_payments_payment_mode {
  cash
  online
  upi
}

enum teacherAttendance_status {
  pending
  approved
  rejected
}

enum Student_payment_pending_status {
  rejected
  approved
  pending
}

enum messageBoards_added_by {
  teacher
  admin
}

enum exams_status {
  scheduled
  ongoing
  completed
  postponed
}

enum teachers_status {
  Active
  Inactive
}

enum messageBoards_type {
  completeSchool
  completeClass
  student
}

enum students_status {
  Active
  Inactive
}

enum students_caste {
  OC
  BC_A @map("BC-A")
  BC_B @map("BC-B")
  BC_C @map("BC-C")
  BC_D @map("BC-D")
  BC_E @map("BC-E")
  SC
  ST
}
